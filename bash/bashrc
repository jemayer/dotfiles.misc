# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# Load shell agnostic rc files
[ -f ~/.shellrc ] && source ~/.shellrc

#### History related options ####

#The history "file" is not updated as you type the commands. The commands get
#stored in a "list" separately (accessed by the history command). The number
#of these stored commands is controlled by HISTSIZE value. When the shell
#(interactive) exits, the last $HISTSIZE lines are copied/appended to
#$HISTFILE from that "list". If HISTFILESIZE is set, then after this
#operation, it is ensured that only $HISTFILESIZE lines (latest) exist
#in $HISTFILE . And when the shell starts, the "list" is initialized
#from $HISTFILE upto a maximum of $HISTSIZE commands.
export HISTSIZE=1000
export HISTFILESIZE=2000
# Bash history: "ignoredups" tells bash to ignore duplicates.
# "ignorespace" tells bash to ignore commands that start with spaces.
# If you wish to specify both values, you can just specify "ignoreboth".
export HISTCONTROL=ignoreboth
# For setting history length see HISTSIZE and HISTFILESIZE in bash(1)
# Append to the history file, don't overwrite it
shopt -s histappend
# Put date before history entries.
export HISTTIMEFORMAT="(%F %T) "
# Check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

#### Set a fancy prompt ####
case "$TERM" in
    xterm*) color_prompt=yes;;
    screen) color_prompt=yes;;
esac
# Support for GIT prompt (__git_ps1)
# Source: https://raw.github.com/git/git/master/contrib/completion/git-prompt.sh
if [ "$color_prompt" = yes ] && [ -f ~/.git-prompt.sh ]; then
    export CLICOLOR=1
    export GIT_PS1_SHOWDIRTYSTATE=1
    source ~/.git-prompt.sh
    PS1='\[\e[0m\]<\[\e[32;1m\]\u\[\e[0m\]@\[\e[34;1m\]\H\[\e[0m\]> \[\e[33;1m\][\w]\[\e[0m\]\[\e[0;31m\]$(__git_ps1 " (%s)")\[\e[1;32m\]\[\e[m\]\n\$ '
elif [ "$color_prompt" = yes ]; then
    export CLICOLOR=1
    PS1='\[\e[0m\]<\[\e[32;1m\]\u\[\e[0m\]@\[\e[34;1m\]\H\[\e[0m\]> \[\e[33;1m\][\w]\[\e[0m\]\n\$ '
fi

#### Bash completion ####

# Enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
[ -f /etc/bash_completion ] && source /etc/bash_completion

# Homebrew bash completion settings.
[ $(which brew) ] && HOMEBREW_PREFIX=$(brew --prefix)
[ -f ${HOMEBREW_PREFIX}/etc/bash_completion ] && source ${HOMEBREW_PREFIX}/etc/bash_completion

#### VirtualEnv for Python & Co ####
[ -f /usr/local/bin/virtualenvwrapper.sh ] && source /usr/local/bin/virtualenvwrapper.sh

#### chruby, see https://github.com/postmodern/chruby ####

# Managed by Homebrew.
if [ -n "${HOMEBREW_PREFIX}" ] ; then
    source /${HOMEBREW_PREFIX}/opt/chruby/share/chruby/chruby.sh
    source /${HOMEBREW_PREFIX}/opt/chruby/share/chruby/auto.sh
fi
