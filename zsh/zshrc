# Requires "oh-my-zsh" configuration framework for fancyness.
# Upstream: https://github.com/robbyrussell/oh-my-zsh
# Tobi's fork: https://github.com/haelmy/oh-my-zsh

# Load shell agnostic rc files
[ -f $HOME/.shellrc ] && source $HOME/.shellrc
# Load local zsh configuration snippets
[ -f $HOME/.zshrc_local ] && source $HOME/.zshrc_local

# ZSH framework configuration
ZSH=$HOME/.oh-my-zsh
# Look for custom theme configuration, fall back to "agnoster"
[ -f $HOME/.zsh_theme ] && source $HOME/.zsh_theme || ZSH_THEME="agnoster"

plugins=(brew bundler chruby colored-man git screen)

source $ZSH/oh-my-zsh.sh

# Unset or set options differently from oh-my-zsh
unsetopt share_history
setopt interactivecomments

# Set directory colors to match solarized
LSCOLORS=gxfxbEaEBxxEhEhBaDaCaD

# Patch the agnoster prompt
directory_name() {
  if [[ -d $(git rev-parse --show-toplevel 2>/dev/null) ]]; then
    # in a git repository
    git_root=$(git rev-parse --show-toplevel)
    physical_pwd=$(pwd -P)
    path_in_git="${physical_pwd#$git_root}"
    base=$(basename $git_root)

    echo -n $base
    echo -n $path_in_git
  else
    echo '%~'
  fi
}

prompt_dir() {
  prompt_segment blue black $(directory_name)
}

# Display Battery Level
# Note: This needs a suitable ZSH theme!
prompt_battery() {
  HEART='â™¥ '

  if [[ $(uname) == "Darwin" ]] ; then

    function battery_is_charging() {
      [ $(ioreg -rc AppleSmartBattery | grep -c '^.*"ExternalConnected"\ =\ No') -eq 1 ]
    }

    function battery_pct() {
      local smart_battery_status="$(ioreg -rc "AppleSmartBattery")"
      typeset -F maxcapacity=$(echo $smart_battery_status | grep '^.*"MaxCapacity"\ =\ ' | sed -e 's/^.*"MaxCapacity"\ =\ //')
      typeset -F currentcapacity=$(echo $smart_battery_status | grep '^.*"CurrentCapacity"\ =\ ' | sed -e 's/^.*CurrentCapacity"\ =\ //')
      integer i=$(((currentcapacity/maxcapacity) * 100))
      echo $i
    }

    function battery_pct_remaining() {
      if battery_is_charging ; then
        battery_pct
      else
        echo "External Power"
      fi
    }

    function battery_time_remaining() {
      local smart_battery_status="$(ioreg -rc "AppleSmartBattery")"
      if [[ $(echo $smart_battery_status | grep -c '^.*"ExternalConnected"\ =\ No') -eq 1 ]] ; then
        timeremaining=$(echo $smart_battery_status | grep '^.*"AvgTimeToEmpty"\ =\ ' | sed -e 's/^.*"AvgTimeToEmpty"\ =\ //')
        if [ $timeremaining -gt 720 ] ; then
          echo "::"
        else
          echo "~$((timeremaining / 60)):$((timeremaining % 60))"
        fi
      fi
    }

    b=$(battery_pct_remaining)
    if [[ $(ioreg -rc AppleSmartBattery | grep -c '^.*"ExternalConnected"\ =\ No') -eq 1 ]] ; then
    	if [ $b -gt 50 ] ; then
      	echo -n "%{$fg_bold[green]%}$HEART$(battery_pct_remaining)%%%{$fg_no_bold[white]%} "
			elif [ $b -gt 20 ] ; then
      	echo -n "%{$fg_bold[yellow]%}$HEART$(battery_pct_remaining)%%%{$fg_no_bold[white]%} "
			else
				echo -n "%{$fg_bold[red]%}$HEART$(battery_pct_remaining)%%%{$fg_no_bold[white]%} "
			fi
    fi
  fi

  if [[ $(uname) == "Linux" && -d /sys/module/battery ]] ; then

    function battery_is_charging() {
      ! [[ $(acpi 2&>/dev/null | grep -c '^Battery.*Discharging') -gt 0 ]]
    }

    function battery_pct() {
      if (( $+commands[acpi] )) ; then
        echo "$(acpi | cut -f2 -d ',' | tr -cd '[:digit:]')"
      fi
    }

    function battery_pct_remaining() {
      if [ ! $(battery_is_charging) ] ; then
        battery_pct
      else
        echo "External Power"
      fi
    }

    function battery_time_remaining() {
      if [[ $(acpi 2&>/dev/null | grep -c '^Battery.*Discharging') -gt 0 ]] ; then
        echo $(acpi | cut -f3 -d ',')
      fi
    }

    b=$(battery_pct_remaining)
    if [[ $(acpi 2&>/dev/null | grep -c '^Battery.*Discharging') -gt 0 ]] ; then
    	if [ $b -gt 50 ] ; then
      	echo -n "%{$fg_bold[green]%}$HEART$(battery_pct_remaining)%%%{$fg_no_bold[white]%} "
			elif [ $b -gt 20 ] ; then
      	echo -n "%{$fg_bold[yellow]%}$HEART$(battery_pct_remaining)%%%{$fg_no_bold[white]%} "
			else
				echo -n "%{$fg_bold[red]%}$HEART$(battery_pct_remaining)%%%{$fg_no_bold[white]%} "
			fi
    fi

  fi
}

# Note: ZSH $PATH configuration on OSX is a bit tricky, see:
# - /etc/paths, /etc/paths.d
# - http://stackoverflow.com/questions/13708719/vim-path-configuration-in-os-x
# - http://blog.damselem.com/mac-os-x-zsh-vim-and-path/

if [ $(uname) = "Darwin" ] ; then
  PATH=$PATH:/usr/local/opt/go/libexec/bin
elif [ $(uname) = "Linux" ] ; then
  [ -d /usr/local/go/bin ] && PATH=$PATH:/usr/local/go/bin
fi
export PATH

# Requires "zsh-syntax-highlighting" from Homebrew
[[ -f /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]] && \
  source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
[[ -f $HOME/Repositories/git/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]] &&
  source $HOME/Repositories/git/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
# Amazon AWS CLI tool autocompletion
[[ -f /usr/local/share/zsh/site-functions/_aws ]] && \
  source /usr/local/share/zsh/site-functions/_aws

# Virtualenv for Python
if [ -f /usr/local/bin/virtualenvwrapper.sh ]; then
  export WORKON_HOME=$HOME/.virtualenvs
  source /usr/local/bin/virtualenvwrapper.sh
fi

# Boot2Docker
# FIXME: This can be down in a more sane way
if [ -x /usr/local/bin/boot2docker ]; then
  eval "$(boot2docker shellinit 2>/dev/null)"
fi
